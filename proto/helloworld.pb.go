// Code generated by protoc-gen-go.
// source: helloworld.proto
// DO NOT EDIT!

/*
Package helloworld is a generated protocol buffer package.

It is generated from these files:
	helloworld.proto

It has these top-level messages:
	MyMessage
*/
package helloworld

import proto "github.com/golang/protobuf/proto"
import "fmt"
import "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type MyMessage struct {
	RequestId string `protobuf:"bytes,1,opt,name=requestId" json:"requestId,omitempty"`
	Text      string `protobuf:"bytes,2,opt,name=text" json:"text,omitempty"`
}

func (m *MyMessage) Reset()                    { *m = MyMessage{} }
func (m *MyMessage) String() string            { return proto.CompactTextString(m) }
func (*MyMessage) ProtoMessage()               {}
func (*MyMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func init() {
	proto.RegisterType((*MyMessage)(nil), "MyMessage")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for Greeter service

type GreeterClient interface {
	SayWord(ctx context.Context, in *MyMessage, opts ...grpc.CallOption) (*MyMessage, error)
}

type greeterClient struct {
	cc *grpc.ClientConn
}

func NewGreeterClient(cc *grpc.ClientConn) GreeterClient {
	return &greeterClient{cc}
}

func (c *greeterClient) SayWord(ctx context.Context, in *MyMessage, opts ...grpc.CallOption) (*MyMessage, error) {
	out := new(MyMessage)
	err := grpc.Invoke(ctx, "/Greeter/SayWord", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Greeter service

type GreeterServer interface {
	SayWord(context.Context, *MyMessage) (*MyMessage, error)
}

func RegisterGreeterServer(s *grpc.Server, srv GreeterServer) {
	s.RegisterService(&_Greeter_serviceDesc, srv)
}

func _Greeter_SayWord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(MyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(GreeterServer).SayWord(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _Greeter_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Greeter",
	HandlerType: (*GreeterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayWord",
			Handler:    _Greeter_SayWord_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

var fileDescriptor0 = []byte{
	// 123 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0x12, 0xc8, 0x48, 0xcd, 0xc9,
	0xc9, 0x2f, 0xcf, 0x2f, 0xca, 0x49, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x57, 0xd2, 0xe1, 0xe2,
	0xf4, 0xad, 0xf4, 0x4d, 0x2d, 0x2e, 0x4e, 0x4c, 0x4f, 0x15, 0x12, 0xe4, 0xe2, 0x2c, 0x4a, 0x2d,
	0x2c, 0x4d, 0x2d, 0x2e, 0xf1, 0x4c, 0x91, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x14, 0xe2, 0xe1, 0x62,
	0x29, 0x49, 0xad, 0x28, 0x91, 0x60, 0x02, 0xf1, 0x8c, 0xf4, 0xb8, 0xd8, 0xdd, 0x8b, 0x52, 0x53,
	0x4b, 0x52, 0x8b, 0x84, 0x94, 0xb9, 0xd8, 0x83, 0x13, 0x2b, 0xc3, 0xf3, 0x8b, 0x52, 0x84, 0xb8,
	0xf4, 0xe0, 0x46, 0x48, 0x21, 0xb1, 0x95, 0x18, 0x92, 0xd8, 0xc0, 0x96, 0x18, 0x03, 0x02, 0x00,
	0x00, 0xff, 0xff, 0x22, 0xa3, 0x22, 0x43, 0x78, 0x00, 0x00, 0x00,
}
